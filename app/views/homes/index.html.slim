- breadcrumb :root

= render 'optional_modules/sliders/show', slider: slider, force: false

= background.handle_background_tag if @background_module.enabled? && !@background.nil?

.row
  - @homes.each do |home|
    article.small-12.columns
      == home.microdata_meta

      header
        h2 = home.title

      div == home.content

      - if @video_module.enabled?
        - if @video_settings.video_platform?
          .row
            - VideoPlatformDecorator.decorate_collection(home.video_platforms_online).each do |video|
              - video_info = VideoInfo.new(video.url)
              - if video_info.available?
                .small-12.medium-6.columns
                  figure.flex-video.widescreen
                    h3 = video.title if video.title? && !video.native_informations?
                    h3 = video_info.title if video.native_informations?
                    == video_info.embed_code
                  figcaption: div == video.description if video.description? && !video.native_informations?
                  figcaption: div == auto_link(video_info.description, html: { target: :blank }) if video.native_informations?

        - if @video_settings.video_upload?
          .row
            - VideoUploadDecorator.decorate_collection(home.video_uploads_online.includes(:video_subtitle)).each_with_index do |video, index|
              .small-12.columns
                h3 = video.title if video.title?
                figure.flex-video
                  video.mediaelement id="video_#{index}" data-autoplay="#{video.video_autoplay?}" data-mute="#{video.video_mute?}" data-controls="#{video.video_controls?}" data-loop="#{video.video_loop?}" poster="#{video.video_file.url(:preview)}"
                    source src="#{video.video_file.url(:mp4video)}" type='video/mp4'
                    source src="#{video.video_file.url(:webmvideo)}" type='video/webm'
                    source src="#{video.video_file.url(:oggvideo)}" type='video/ogv'
                    - if video.try(:video_subtitle).try(:subtitle_fr).try(:exists?)
                      track kind='subtitles' src="#{video.video_subtitle.subtitle_fr.url}" srclang='fr' label='Fran√ßais'
                    - if video.try(:video_subtitle).try(:subtitle_en).try(:exists?)
                      track kind='subtitles' src="#{video.video_subtitle.subtitle_en.url}" srclang='en' label='English' default='default'
                    = t('video.no_html5')
                  figcaption: div == video.description if video.description?