upstream puma_<%= fetch(:nginx_config_name) %> { <%
  flags = 'fail_timeout=0'
  @backends = [fetch(:puma_bind)].flatten.map do |m|
  etype, address  = /(tcp|unix|ssl):\/{1,2}(.+)/.match(m).captures
  if etype =='unix'
    "server #{etype}:#{address} #{fetch(:nginx_socket_flags)};"
  else
    "server #{address.gsub(/0\.0\.0\.0(.+)/, "127.0.0.1\\1")} #{fetch(:nginx_http_flags)};"
  end
end
%><% @backends.each do |server|  %>
  <%= server %><% end %>
}
<% if fetch(:nginx_use_ssl) %>
# Redirect FROM http to https
server {
  listen 80;
  listen [::]:80;
  server_name <%= fetch(:nginx_server_name).gsub('www.', '') %> <%= fetch(:nginx_server_name) %>;

  location ~ /\.well-known/acme-challenge {
    allow all;
  }
  <% if fetch(:nginx_enforce_www) %>
  rewrite ^(.*) https://www.$host$1 permanent; <% else %>
  rewrite ^(.*) https://$host$1 permanent; <% end %>
}
<% else %>
<% if fetch(:nginx_enforce_www) %>
# Redirect FROM http non-www TO http www
server {
  listen 80;
  listen [::]:80;

  server_name <%= fetch(:nginx_server_name).gsub('www.', '') %>;
  rewrite ^(.*) http://www.$host$1 permanent;
} <% else %>
# Redirect FROM http www TO http non-www
server {
  listen 80;
  listen [::]:80;

  server_name <%= fetch(:nginx_server_name) %>;
  rewrite ^(.*) http://$host$1 permanent;
} <% end # /nginx_enforce_www %>
<% end # /nginx_use_ssl %>

<% if fetch(:nginx_use_ssl) && fetch(:nginx_enforce_www) %>
# Redirect FROM https non-www TO https www
server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  server_name <%= fetch(:nginx_server_name).gsub('www.', '') %>;

  # SSL
  ssl on;
  ssl_certificate /etc/letsencrypt/live/<%= fetch(:domain_name) %>/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/<%= fetch(:domain_name) %>/privkey.pem;

  rewrite ^(.*) https://www.$host$1 permanent;
} <% end %>

<% if fetch(:nginx_use_ssl) && !fetch(:nginx_enforce_www) %>
# Redirect FROM https www TO https non-www
server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  server_name <%= fetch(:nginx_server_name) %>;

  # SSL
  ssl on;
  ssl_certificate /etc/letsencrypt/live/<%= fetch(:domain_name) %>/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/<%= fetch(:domain_name) %>/privkey.pem;

  rewrite ^(.*) https://$host$1 permanent;
} <% end %>

# Full config
server {
<% if fetch(:nginx_use_ssl) %>
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  # SSL
  ssl on;
  ssl_certificate /etc/letsencrypt/live/<%= fetch(:domain_name) %>/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/<%= fetch(:domain_name) %>/privkey.pem;
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_trusted_certificate /etc/letsencrypt/live/<%= fetch(:domain_name) %>/fullchain.pem;

  # Google DNS, Open DNS, Dyn DNS
  resolver 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 216.146.35.35 216.146.36.36 valid=300s;
  resolver_timeout 3s;

  # ECDH Curve
  ssl_ecdh_curve secp384r1;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';

<% else %>
  listen 80;
  listen [::]:80;
<% end %>

  client_max_body_size 4G;
  keepalive_timeout 10;

  error_page 500 502 504 /500.html;
  error_page 503 @503;

  <% if fetch(:nginx_enforce_www) %>
  server_name <%= fetch(:nginx_server_name) %>; <% else %>
  server_name <%= fetch(:nginx_server_name).gsub('www.', '') %>; <% end %>
  root <%= current_path %>/public;
  try_files $uri/index.html $uri @puma_<%= fetch(:nginx_config_name) %>;

  location @puma_<%= fetch(:nginx_config_name) %> {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
<% if fetch(:nginx_use_ssl) %>
    proxy_set_header X-Forwarded-Proto https;
<% end %>
    proxy_pass http://puma_<%= fetch(:nginx_config_name) %>;
    # limit_req zone=one;
    access_log <%= shared_path %>/log/nginx.access.log;
    error_log <%= shared_path %>/log/nginx.error.log;
  }

<% if fetch(:puma_use_actioncable) %>
  location /cable {
    proxy_pass http://puma_<%= fetch(:nginx_config_name) %>;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
  }
<% end %>

  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  location = /50x.html {
    root html;
  }

  location = /404.html {
    root html;
  }

  location @503 {
    error_page 405 = /system/maintenance.html;
    if (-f $document_root/system/maintenance.html) {
      rewrite ^(.*)$ /system/maintenance.html break;
    }
    rewrite ^(.*)$ /503.html break;
  }

  if ($request_method !~ ^(GET|HEAD|PUT|PATCH|POST|DELETE|OPTIONS)$ ){
    return 405;
  }

  if (-f $document_root/system/maintenance.html) {
    return 503;
  }

  location ~ \.(php|html)$ {
    return 405;
  }
}
